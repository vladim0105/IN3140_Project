# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from crustcrawler_msgs/CircleDescription.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class CircleDescription(genpy.Message):
  _md5sum = "5a70b8e621c6258f244ab550ac3bc73e"
  _type = "crustcrawler_msgs/CircleDescription"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message describes a circle that is meant to be drawn by the reduced
# Crustcrawler.

# Standard header:
Header header

# Description of the circle to be drawn:
# Origin of the circle
geometry_msgs/Point origin
# Radius of the circle in centimeters
float32 radius
# Number of points describes the total number of points to draw in the circle
# NOTE: Remember that the circle should always be completed
int32 num_points
# The following two arguments describes the orientation of the board using
# axis-angle notation. The angle is in radians
float32 angle
# The axis is a unit vector
geometry_msgs/Vector3 axis

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','origin','radius','num_points','angle','axis']
  _slot_types = ['std_msgs/Header','geometry_msgs/Point','float32','int32','float32','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,origin,radius,num_points,angle,axis

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CircleDescription, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      if self.radius is None:
        self.radius = 0.
      if self.num_points is None:
        self.num_points = 0
      if self.angle is None:
        self.angle = 0.
      if self.axis is None:
        self.axis = geometry_msgs.msg.Vector3()
    else:
      self.header = std_msgs.msg.Header()
      self.origin = geometry_msgs.msg.Point()
      self.radius = 0.
      self.num_points = 0
      self.angle = 0.
      self.axis = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3dfif3d().pack(_x.origin.x, _x.origin.y, _x.origin.z, _x.radius, _x.num_points, _x.angle, _x.axis.x, _x.axis.y, _x.axis.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      if self.axis is None:
        self.axis = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.origin.x, _x.origin.y, _x.origin.z, _x.radius, _x.num_points, _x.angle, _x.axis.x, _x.axis.y, _x.axis.z,) = _get_struct_3dfif3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3dfif3d().pack(_x.origin.x, _x.origin.y, _x.origin.z, _x.radius, _x.num_points, _x.angle, _x.axis.x, _x.axis.y, _x.axis.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.origin is None:
        self.origin = geometry_msgs.msg.Point()
      if self.axis is None:
        self.axis = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.origin.x, _x.origin.y, _x.origin.z, _x.radius, _x.num_points, _x.angle, _x.axis.x, _x.axis.y, _x.axis.z,) = _get_struct_3dfif3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3dfif3d = None
def _get_struct_3dfif3d():
    global _struct_3dfif3d
    if _struct_3dfif3d is None:
        _struct_3dfif3d = struct.Struct("<3dfif3d")
    return _struct_3dfif3d
