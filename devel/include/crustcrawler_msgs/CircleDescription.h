// Generated by gencpp from file crustcrawler_msgs/CircleDescription.msg
// DO NOT EDIT!


#ifndef CRUSTCRAWLER_MSGS_MESSAGE_CIRCLEDESCRIPTION_H
#define CRUSTCRAWLER_MSGS_MESSAGE_CIRCLEDESCRIPTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace crustcrawler_msgs
{
template <class ContainerAllocator>
struct CircleDescription_
{
  typedef CircleDescription_<ContainerAllocator> Type;

  CircleDescription_()
    : header()
    , origin()
    , radius(0.0)
    , num_points(0)
    , angle(0.0)
    , axis()  {
    }
  CircleDescription_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , origin(_alloc)
    , radius(0.0)
    , num_points(0)
    , angle(0.0)
    , axis(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef float _radius_type;
  _radius_type radius;

   typedef int32_t _num_points_type;
  _num_points_type num_points;

   typedef float _angle_type;
  _angle_type angle;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _axis_type;
  _axis_type axis;





  typedef boost::shared_ptr< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> const> ConstPtr;

}; // struct CircleDescription_

typedef ::crustcrawler_msgs::CircleDescription_<std::allocator<void> > CircleDescription;

typedef boost::shared_ptr< ::crustcrawler_msgs::CircleDescription > CircleDescriptionPtr;
typedef boost::shared_ptr< ::crustcrawler_msgs::CircleDescription const> CircleDescriptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crustcrawler_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'crustcrawler_msgs': ['/home/vladimmo/ros/src/crustcrawler_simulation/crustcrawler_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a70b8e621c6258f244ab550ac3bc73e";
  }

  static const char* value(const ::crustcrawler_msgs::CircleDescription_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a70b8e621c6258fULL;
  static const uint64_t static_value2 = 0x244ab550ac3bc73eULL;
};

template<class ContainerAllocator>
struct DataType< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crustcrawler_msgs/CircleDescription";
  }

  static const char* value(const ::crustcrawler_msgs::CircleDescription_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes a circle that is meant to be drawn by the reduced\n\
# Crustcrawler.\n\
\n\
# Standard header:\n\
Header header\n\
\n\
# Description of the circle to be drawn:\n\
# Origin of the circle\n\
geometry_msgs/Point origin\n\
# Radius of the circle in centimeters\n\
float32 radius\n\
# Number of points describes the total number of points to draw in the circle\n\
# NOTE: Remember that the circle should always be completed\n\
int32 num_points\n\
# The following two arguments describes the orientation of the board using\n\
# axis-angle notation. The angle is in radians\n\
float32 angle\n\
# The axis is a unit vector\n\
geometry_msgs/Vector3 axis\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::crustcrawler_msgs::CircleDescription_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.origin);
      stream.next(m.radius);
      stream.next(m.num_points);
      stream.next(m.angle);
      stream.next(m.axis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CircleDescription_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crustcrawler_msgs::CircleDescription_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crustcrawler_msgs::CircleDescription_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "num_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_points);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "axis: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.axis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRUSTCRAWLER_MSGS_MESSAGE_CIRCLEDESCRIPTION_H
